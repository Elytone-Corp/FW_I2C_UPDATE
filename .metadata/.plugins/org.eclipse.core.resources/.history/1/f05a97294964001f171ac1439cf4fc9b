

//*********************************STABLE_CODE_STABLE_PWM_DETECT & CLASSIFICATION**************************************



//
//#include <stdio.h>
//#include "mxc_device.h"
//#include "gpio.h"
//#include "tmr.h"
//#include "nvic_table.h"
//#include "mxc_delay.h"
//#include "uart.h"
//
//#define PWM_INPUT_PIN      13  // This is P0_2, connected to the PWM signal
//#define TMR_IDX            0  // Use Timer 0
//
//volatile uint32_t risingEdge1 = 0, fallingEdge = 0, period = 0;
//volatile uint32_t highTime = 0;
//volatile float dutyCycle = 0.0;
//volatile int measurementReady = 0;
//volatile int currentClass = -1;
//
//void PWM_Handler(void* cbdata);
//
//void GPIO_Init(void) {
//    mxc_gpio_cfg_t gpio_cfg_pwm = {
//        .port = MXC_GPIO0,
//        .mask = (1 << PWM_INPUT_PIN),
//        .pad = MXC_GPIO_PAD_NONE,
//        .func = MXC_GPIO_FUNC_IN
//    };
//    MXC_GPIO_Config(&gpio_cfg_pwm);
//
//    // Register and enable interrupts
//    MXC_GPIO_RegisterCallback(&gpio_cfg_pwm, PWM_Handler, NULL);
//    MXC_GPIO_IntConfig(&gpio_cfg_pwm, MXC_GPIO_INT_BOTH);
//    MXC_GPIO_EnableInt(gpio_cfg_pwm.port, gpio_cfg_pwm.mask);
//
//    NVIC_EnableIRQ(MXC_GPIO_GET_IRQ(MXC_GPIO_GET_IDX(MXC_GPIO0)));
//}
//
//void Timer_Init(void) {
//    mxc_tmr_cfg_t tmr_cfg;
//
//    MXC_TMR_Stop(MXC_TMR_GET_TMR(TMR_IDX));
//
//    tmr_cfg.pres = MXC_TMR_PRES_1;
//    tmr_cfg.mode = MXC_TMR_MODE_CONTINUOUS;
//    tmr_cfg.cmp_cnt = 0;
//    tmr_cfg.pol = 0;
//
//    MXC_TMR_Init(MXC_TMR_GET_TMR(TMR_IDX), &tmr_cfg);
//    MXC_TMR_Start(MXC_TMR_GET_TMR(TMR_IDX));
//}
//
//void PWM_Handler(void* cbdata) {
//    uint32_t current_time = MXC_TMR_GetCount(MXC_TMR_GET_TMR(TMR_IDX));
//
//    if (MXC_GPIO_InGet(MXC_GPIO0, (1 << PWM_INPUT_PIN))) {
//        if (risingEdge1 == 0) {
//            risingEdge1 = current_time;
//        } else {
//            period = current_time - risingEdge1;
//            risingEdge1 = current_time;
//            measurementReady = 1;
//        }
//    } else {
//        fallingEdge = current_time;
//        highTime = fallingEdge - risingEdge1;
//    }
//}
//
//void Process_PWM(void) {
//    if (measurementReady) {
//        measurementReady = 0;
//
//        dutyCycle = ((float)highTime / period) * 100.0;
//
//        // Handle possible high duty cycles (near 90%)
//        if (dutyCycle > 95.0) {
//            dutyCycle = 90.0;
//        }
//
//        // Define ranges based on the new logic (I used 4 units)
//        const float requiredDutyCycleRanges[4][2] = {
//            {23.0, 28.0},  // 25% duty cycle range
//            {48.0, 53.0},  // 50% duty cycle range
//            {73.0, 78.0},  // 75% duty cycle range
//            {88.0, 92.0}   // 90% duty cycle range
//        };
//
//        // Classification logic
//        for (int i = 0; i < 4; i++) {
//            if (dutyCycle >= requiredDutyCycleRanges[i][0] && dutyCycle <= requiredDutyCycleRanges[i][1]) {
//                if (i != currentClass) {
//                    float classifiedDuty = (i + 1) * 22.5;
//                    if (i == 0) classifiedDuty = 25;
//                    if (i == 1) classifiedDuty = 50;
//                    if (i == 2) classifiedDuty = 75;
//                    if (i == 3) classifiedDuty = 90;
//
//                    //printf("Measured Duty Cycle: %.2f%%\n", dutyCycle);
//                    printf("----------  ");
//                    printf("Captured Duty Cycle =====>> %.0f%% duty cycle\n", classifiedDuty);
//                    currentClass = i;
//                }
//                break;
//            }
//        }
//    }
//}
//
//int main(void) {
//    GPIO_Init();
//    Timer_Init();
//
//    // Initial classification right after start
//    printf("STARING_____ AT :--> \n\t");
//    Process_PWM();
//
//    while (1) {
//        Process_PWM();
//        MXC_Delay(MXC_DELAY_MSEC(250));
//    }
//
//    return 0;
//}


//==================================================================================================================




#include <stdio.h>
#include "mxc_device.h"
#include "gpio.h"
#include "tmr.h"
#include "nvic_table.h"
#include "mxc_delay.h"
#include "uart.h"
#include "board.h"

#define PWM_INPUT_PIN      13  // This is P0_13, connected to the PWM signal
#define TMR_IDX            0   // Use Timer 0
#define BUFFER_SIZE        14  // Size of the buffer for storing duty cycle events

volatile uint32_t risingEdge1 = 0, fallingEdge = 0, period = 0;
volatile uint32_t highTime = 0;
volatile float dutyCycle = 0.0;
volatile int measurementReady = 0;
volatile int currentClass = -1;

float dutyCycleBuffer[BUFFER_SIZE];  // Buffer to store 14 events
int bufferIndex = 0;  // Index for buffer
int capturingSequence = 0;  // Flag to indicate if we're capturing the sequence

void PWM_Handler(void* cbdata);
void classifySequence(float* buffer);
void resetBuffer();

void GPIO_Init(void) {
    mxc_gpio_cfg_t gpio_cfg_pwm = {
        .port = MXC_GPIO0,
        .mask = (1 << PWM_INPUT_PIN),
        .pad = MXC_GPIO_PAD_NONE,
        .func = MXC_GPIO_FUNC_IN
    };
    MXC_GPIO_Config(&gpio_cfg_pwm);

    // Register and enable interrupts
    MXC_GPIO_RegisterCallback(&gpio_cfg_pwm, PWM_Handler, NULL);
    MXC_GPIO_IntConfig(&gpio_cfg_pwm, MXC_GPIO_INT_BOTH);
    MXC_GPIO_EnableInt(gpio_cfg_pwm.port, gpio_cfg_pwm.mask);

    NVIC_EnableIRQ(MXC_GPIO_GET_IRQ(MXC_GPIO_GET_IDX(MXC_GPIO0)));
}

void Timer_Init(void) {
    mxc_tmr_cfg_t tmr_cfg;

    MXC_TMR_Stop(MXC_TMR_GET_TMR(TMR_IDX));

    tmr_cfg.pres = MXC_TMR_PRES_1;
    tmr_cfg.mode = MXC_TMR_MODE_CONTINUOUS;
    tmr_cfg.cmp_cnt = 0;
    tmr_cfg.pol = 0;

    MXC_TMR_Init(MXC_TMR_GET_TMR(TMR_IDX), &tmr_cfg);
    MXC_TMR_Start(MXC_TMR_GET_TMR(TMR_IDX));
}

void PWM_Handler(void* cbdata) {
    uint32_t current_time = MXC_TMR_GetCount(MXC_TMR_GET_TMR(TMR_IDX));

    // Capture logic: Measure the period and high time
    if (MXC_GPIO_InGet(MXC_GPIO0, (1 << PWM_INPUT_PIN))) {
        // Rising edge detected
        if (risingEdge1 == 0) {
            risingEdge1 = current_time;
        } else {
            period = current_time - risingEdge1;
            risingEdge1 = current_time;
            measurementReady = 1;  // Signal that a measurement is ready
        }
    } else {
        // Falling edge detected
        fallingEdge = current_time;
        highTime = fallingEdge - risingEdge1;
    }
}

void Process_PWM(void) {
    if (measurementReady) {
        measurementReady = 0;

        // Calculate duty cycle
        dutyCycle = ((float)highTime / period) * 100.0;

        // Handle possible high duty cycles (near 90%)
        if (dutyCycle > 95.0) {
            dutyCycle = 90.0;
        }

        // Start capturing sequence when 90% duty cycle is detected
        if (dutyCycle >= 88.0 && dutyCycle <= 92.0 && !capturingSequence) {
            capturingSequence = 1;  // Start sequence capture
            bufferIndex = 0;  // Reset buffer index
        }

        // Capture 14 events in the buffer
        if (capturingSequence && bufferIndex < BUFFER_SIZE) {
            dutyCycleBuffer[bufferIndex++] = dutyCycle;

            // Stop capturing when buffer is full
            if (bufferIndex == BUFFER_SIZE) {
                capturingSequence = 0;  // Stop capturing further events
            }
        }
    }
}

void classifySequence(float* buffer) {
    // Example classification logic based on predefined patterns
    if (buffer[0] >= 88.0 && buffer[0] <= 92.0 &&
        buffer[1] >= 48.0 && buffer[1] <= 53.0 &&
        buffer[2] >= 73.0 && buffer[2] <= 78.0 &&
        buffer[3] >= 23.0 && buffer[3] <= 28.0) {
        printf("Detected CLASS 5 sequence!\n");
    }
    // Add more patterns as needed...
}

void resetBuffer() {
    // Reset the buffer and related variables
    for (int i = 0; i < BUFFER_SIZE; i++) {
        dutyCycleBuffer[i] = 0.0;
    }
    bufferIndex = 0;
    capturingSequence = 0;
}

int main(void) {
    GPIO_Init();
    Timer_Init();

    // Initial classification right after start
    printf("STARTING_____ AT :--> \n\t");

    while (1) {
        Process_PWM();

        if (bufferIndex == BUFFER_SIZE) {
            // Perform pattern matching and classification
            classifySequence(dutyCycleBuffer);

            // Reset the buffer after classification
            resetBuffer();
        }

        MXC_Delay(MXC_DELAY_MSEC(250));  // Delay for readability
    }

    return 0;
}
