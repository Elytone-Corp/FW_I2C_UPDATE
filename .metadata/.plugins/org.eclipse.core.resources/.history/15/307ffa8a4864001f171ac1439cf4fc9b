

//*********************************STABLE_CODE_STABLE_PWM_DETECT & CLASSIFICATION**************************************



//
//#include <stdio.h>
//#include "mxc_device.h"
//#include "gpio.h"
//#include "tmr.h"
//#include "nvic_table.h"
//#include "mxc_delay.h"
//#include "uart.h"
//
//#define PWM_INPUT_PIN      13  // This is P0_2, connected to the PWM signal
//#define TMR_IDX            0  // Use Timer 0
//
//volatile uint32_t risingEdge1 = 0, fallingEdge = 0, period = 0;
//volatile uint32_t highTime = 0;
//volatile float dutyCycle = 0.0;
//volatile int measurementReady = 0;
//volatile int currentClass = -1;
//
//void PWM_Handler(void* cbdata);
//
//void GPIO_Init(void) {
//    mxc_gpio_cfg_t gpio_cfg_pwm = {
//        .port = MXC_GPIO0,
//        .mask = (1 << PWM_INPUT_PIN),
//        .pad = MXC_GPIO_PAD_NONE,
//        .func = MXC_GPIO_FUNC_IN
//    };
//    MXC_GPIO_Config(&gpio_cfg_pwm);
//
//    // Register and enable interrupts
//    MXC_GPIO_RegisterCallback(&gpio_cfg_pwm, PWM_Handler, NULL);
//    MXC_GPIO_IntConfig(&gpio_cfg_pwm, MXC_GPIO_INT_BOTH);
//    MXC_GPIO_EnableInt(gpio_cfg_pwm.port, gpio_cfg_pwm.mask);
//
//    NVIC_EnableIRQ(MXC_GPIO_GET_IRQ(MXC_GPIO_GET_IDX(MXC_GPIO0)));
//}
//
//void Timer_Init(void) {
//    mxc_tmr_cfg_t tmr_cfg;
//
//    MXC_TMR_Stop(MXC_TMR_GET_TMR(TMR_IDX));
//
//    tmr_cfg.pres = MXC_TMR_PRES_1;
//    tmr_cfg.mode = MXC_TMR_MODE_CONTINUOUS;
//    tmr_cfg.cmp_cnt = 0;
//    tmr_cfg.pol = 0;
//
//    MXC_TMR_Init(MXC_TMR_GET_TMR(TMR_IDX), &tmr_cfg);
//    MXC_TMR_Start(MXC_TMR_GET_TMR(TMR_IDX));
//}
//
//void PWM_Handler(void* cbdata) {
//    uint32_t current_time = MXC_TMR_GetCount(MXC_TMR_GET_TMR(TMR_IDX));
//
//    if (MXC_GPIO_InGet(MXC_GPIO0, (1 << PWM_INPUT_PIN))) {
//        if (risingEdge1 == 0) {
//            risingEdge1 = current_time;
//        } else {
//            period = current_time - risingEdge1;
//            risingEdge1 = current_time;
//            measurementReady = 1;
//        }
//    } else {
//        fallingEdge = current_time;
//        highTime = fallingEdge - risingEdge1;
//    }
//}
//
//void Process_PWM(void) {
//    if (measurementReady) {
//        measurementReady = 0;
//
//        dutyCycle = ((float)highTime / period) * 100.0;
//
//        // Handle possible high duty cycles (near 90%)
//        if (dutyCycle > 95.0) {
//            dutyCycle = 90.0;
//        }
//
//        // Define ranges based on the new logic (I used 4 units)
//        const float requiredDutyCycleRanges[4][2] = {
//            {23.0, 28.0},  // 25% duty cycle range
//            {48.0, 53.0},  // 50% duty cycle range
//            {73.0, 78.0},  // 75% duty cycle range
//            {88.0, 92.0}   // 90% duty cycle range
//        };
//
//        // Classification logic
//        for (int i = 0; i < 4; i++) {
//            if (dutyCycle >= requiredDutyCycleRanges[i][0] && dutyCycle <= requiredDutyCycleRanges[i][1]) {
//                if (i != currentClass) {
//                    float classifiedDuty = (i + 1) * 22.5;
//                    if (i == 0) classifiedDuty = 25;
//                    if (i == 1) classifiedDuty = 50;
//                    if (i == 2) classifiedDuty = 75;
//                    if (i == 3) classifiedDuty = 90;
//
//                    //printf("Measured Duty Cycle: %.2f%%\n", dutyCycle);
//                    printf("----------  ");
//                    printf("Captured Duty Cycle =====>> %.0f%% duty cycle\n", classifiedDuty);
//                    currentClass = i;
//                }
//                break;
//            }
//        }
//    }
//}
//
//int main(void) {
//    GPIO_Init();
//    Timer_Init();
//
//    // Initial classification right after start
//    printf("STARING_____ AT :--> \n\t");
//    Process_PWM();
//
//    while (1) {
//        Process_PWM();
//        MXC_Delay(MXC_DELAY_MSEC(250));
//    }
//
//    return 0;
//}


//==================================================================================================================




#include <stdio.h>
#include "mxc_device.h"
#include "gpio.h"
#include "tmr.h"
#include "nvic_table.h"
#include "mxc_delay.h"
#include "uart.h"
#include "board.h"
#define PWM_INPUT_PIN      13  // This is P0_2, connected to the PWM signal
#define TMR_IDX            0   // Use Timer 0
#define MAX_EVENTS         14  // Buffer size for capturing 14 events

volatile uint32_t risingEdge1 = 0, fallingEdge = 0, period = 0;
volatile uint32_t highTime = 0;
volatile float dutyCycle = 0.0;
volatile int measurementReady = 0;

float duty_cycles[MAX_EVENTS];  // Buffer for storing duty cycles
int duty_cycle_index = 0;       // To track the buffer index
volatile int buffer_filled = 0; // Flag to indicate when the buffer is full

void PWM_Handler(void* cbdata);

void GPIO_Init(void) {
    mxc_gpio_cfg_t gpio_cfg_pwm = {
        .port = MXC_GPIO0,
        .mask = (1 << PWM_INPUT_PIN),
        .pad = MXC_GPIO_PAD_NONE,
        .func = MXC_GPIO_FUNC_IN
    };
    MXC_GPIO_Config(&gpio_cfg_pwm);

    // Register and enable interrupts
    MXC_GPIO_RegisterCallback(&gpio_cfg_pwm, PWM_Handler, NULL);
    MXC_GPIO_IntConfig(&gpio_cfg_pwm, MXC_GPIO_INT_BOTH);
    MXC_GPIO_EnableInt(gpio_cfg_pwm.port, gpio_cfg_pwm.mask);

    NVIC_EnableIRQ(MXC_GPIO_GET_IRQ(MXC_GPIO_GET_IDX(MXC_GPIO0)));
}

void Timer_Init(void) {
    mxc_tmr_cfg_t tmr_cfg;

    MXC_TMR_Stop(MXC_TMR_GET_TMR(TMR_IDX));

    tmr_cfg.pres = MXC_TMR_PRES_1;
    tmr_cfg.mode = MXC_TMR_MODE_CONTINUOUS;
    tmr_cfg.cmp_cnt = 0;
    tmr_cfg.pol = 0;

    MXC_TMR_Init(MXC_TMR_GET_TMR(TMR_IDX), &tmr_cfg);
    MXC_TMR_Start(MXC_TMR_GET_TMR(TMR_IDX));
}

void PWM_Handler(void* cbdata) {
    uint32_t current_time = MXC_TMR_GetCount(MXC_TMR_GET_TMR(TMR_IDX));

    if (MXC_GPIO_InGet(MXC_GPIO0, (1 << PWM_INPUT_PIN))) {
        if (risingEdge1 == 0) {
            risingEdge1 = current_time;
        } else {
            period = current_time - risingEdge1;
            risingEdge1 = current_time;
            measurementReady = 1;
        }
    } else {
        fallingEdge = current_time;
        highTime = fallingEdge - risingEdge1;
    }
}

void Process_PWM(void) {
    if (measurementReady && !buffer_filled) {
        measurementReady = 0;

        dutyCycle = ((float)highTime / period) * 100.0;

        // Handle possible high duty cycles (near 90%)
        if (dutyCycle > 95.0) {
            dutyCycle = 90.0;
        }

        // Start buffer filling when 90% is detected
        if (dutyCycle == 90.0 && duty_cycle_index == 0) {
            duty_cycles[duty_cycle_index++] = dutyCycle;  // Store 90% at index 0
            printf("Buffer started at 90%%. Index: %d\n", duty_cycle_index);
        }
        else if (duty_cycle_index > 0 && duty_cycle_index < MAX_EVENTS) {
            duty_cycles[duty_cycle_index++] = dutyCycle;
            printf("Captured event %d: %.2f%%\n", duty_cycle_index, dutyCycle);
        }

        // Check if the buffer is full
        if (duty_cycle_index >= MAX_EVENTS) {
            buffer_filled = 1;  // Mark buffer as filled
            printf("Buffer filled with 14 events.\n");
        }
    }
}

void classify_pd_class(float duty_cycles[]) {
    // Classify based on the last 4 duty cycle sequence in the buffer
    printf("Classifying based on the last 4 events...\n");
    if (duty_cycles[MAX_EVENTS - 4] == 25 && duty_cycles[MAX_EVENTS - 3] == 25 && duty_cycles[MAX_EVENTS - 2] == 25 && duty_cycles[MAX_EVENTS - 1] == 90) {
        printf("Classified as ==> CLASS 4\n");
    } else if (duty_cycles[MAX_EVENTS - 4] == 25 && duty_cycles[MAX_EVENTS - 3] == 50 && duty_cycles[MAX_EVENTS - 2] == 50 && duty_cycles[MAX_EVENTS - 1] == 90) {
        printf("Classified as ==> CLASS 5\n");
    } else if (duty_cycles[MAX_EVENTS - 4] == 25 && duty_cycles[MAX_EVENTS - 3] == 50 && duty_cycles[MAX_EVENTS - 2] == 75 && duty_cycles[MAX_EVENTS - 1] == 90) {
        printf("Classified as ==> CLASS 6\n");
    } else if (duty_cycles[MAX_EVENTS - 4] == 25 && duty_cycles[MAX_EVENTS - 3] == 75 && duty_cycles[MAX_EVENTS - 2] == 50 && duty_cycles[MAX_EVENTS - 1] == 90) {
        printf("Classified as ==> CLASS 7\n");
    } else if (duty_cycles[MAX_EVENTS - 4] == 25 && duty_cycles[MAX_EVENTS - 3] == 75 && duty_cycles[MAX_EVENTS - 2] == 75 && duty_cycles[MAX_EVENTS - 1] == 90) {
        printf("Classified as ==> CLASS 8\n");
    } else {
        printf("Unknown sequence detected.\n");
    }
}

void Process_Buffer(void) {
    if (buffer_filled) {
        printf("Processing buffer...\n");

        // Process the buffer (classify based on last 4 events)
        classify_pd_class(duty_cycles);

        // Clear the buffer for the next window
        duty_cycle_index = 0;
        buffer_filled = 0;

        printf("Buffer cleared. Ready for next capture.\n");
    }
}

int main(void) {
	MXC_Delay(MXC_DELAY_MSEC(3));
    GPIO_Init();
    Timer_Init();

    printf("Starting...\n");

    while (1) {
        Process_PWM();   // Capture the PWM signal
        Process_Buffer(); // Process the buffer when full
        MXC_Delay(MXC_DELAY_MSEC(10));  // Delay for readability
    }

    return 0;
}
