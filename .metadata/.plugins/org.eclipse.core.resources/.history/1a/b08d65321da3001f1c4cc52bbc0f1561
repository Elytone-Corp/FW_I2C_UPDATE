

/*Script - flash_manager.c*/
// by:-  Ashutosh tiwari



#include "bootloader.h"
#include "state_manager.h"
#include "memory_manager.h"
#include "partition_manager.h"
#include "flash_manager.h"
#include "crc.h"
#include "reboot_manager.h"
#include <stdio.h>
#include <string.h>

static bootloader_state_t current_state = BOOTLOADER_IDLE;
static bootloader_error_t last_error = BOOTLOADER_NO_ERROR;

static void SetError(bootloader_error_t error) {
	last_error = error;
	current_state = BOOTLOADER_ERROR;
	LogManager_Log(LOG_LEVEL_ERROR, "[Bootloader] Error encountered: %d", error);

}

void Bootloader_Init(void) {
    LogManager_Log("[Bootloader] Starting initialization...\n");

    RebootManager_Init();

    // Initialize memory manager
    if (!Memory_Manager_Init()) {
        LogManager_Log("[Bootloader] Critical Error: Failed to initialize memory manager.\n");
        SetError(BOOTLOADER_ERR_MEMORY_INIT_FAIL);
        return;
    }

    // Initialize state via StateManager
    StateManager_Init();

    if (StateManager_IsInState(STATE_BOOT)) {
        LogManager_Log("[Bootloader] Boot state detected.\n");
        // Potentially load data if boot state needs intermediate buffers
        uint8_t* temp_buffer = Memory_Allocate(INITIAL_BUFFER_SIZE);
        if (temp_buffer) {
            // Perform necessary boot state logic using temp_buffer
            Memory_Free(temp_buffer);  // Ensure cleanup after use
        } else {
            LogManager_Log("[Bootloader] Warning: Temporary buffer allocation failed.\n");
        }
    }

    Partition_Init();

    if (Partition_IsValid(PARTITION_ACTIVE)) {
        current_state = BOOTLOADER_BOOT;
        LogManager_Log("[Bootloader] Active partition is valid. Ready to boot.\n");
    } else if (Partition_IsValid(PARTITION_INACTIVE)) {
        current_state = BOOTLOADER_ROLLBACK;
        LogManager_Log("[Bootloader] Inactive partition is valid. Rollback initiated.\n");
    } else {
        LogManager_Log("[Bootloader] No valid firmware found in either partition.\n");
        SetError(BOOTLOADER_ERR_NO_VALID_FW);
    }

    LogManager_Log("[Bootloader] Initialization complete.\n");
}


void CheckUpdateState(void) {
    if (StateManager_IsInState(STATE_UPDATE)) {
        LogManager_Log("[Bootloader] Firmware update is in progress...\n");
        // Perform any specific actions for update state
    } else {
        LogManager_Log("[Bootloader] Not in update state.\n");
    }
}


bool Bootlaoder_FirmwareUpdate(const uint8_t* firmware, uint32_t size) {
	LogManager_Log("[Bootloader] Firmware update process started...\n");

	if (size > PARTITION_SIZE) {
		LogManager_Log("[Bootloader] Error: Firmware size exceeds partition size.\n");
		SetError(BOOTLOADER_ERR_FW_UPDATE_FAIL);
		return false;
	}

	if (Flash_ProgramPage(PARTITION_INACTIVE_START, firmware, size) != FLASH_SUCCESS) {
		LogManager_Log("[Bootloader] Error: Flash program failed");
		SetError(BOOTLOADER_ERR_FW_UPDATE_FAIL);
		return false;
	}

	Partition_Validate(PARTITION_INACTIVE);
	current_state = BOOTLOADER_UPDATE;
	LogManager_Log("[Bootloader] Firmware update completed successfully.\n");
	return true;

}

bool Bootloader_ValidateAndBoot(void) {
	LogManager_Log("[Bootloader] Validating Active firmware....\n");

	if (!Partition_Validate(PARTITION_ACTIVE)) {
		LogManager_Log("[Bootloader] Error: Active partition is invalid.\n");

		SetError(BOOTLOADER_ERR_FW_UPDATE_FAIL);
		current_state = BOOTLOADER_ROLLBACK;
		RebootManager_PrepareReboot("Active partition invalid. Rebooting...");
		RebootManager_Reboot();
		return false;
}

#ifdef USE_CRC_VALIDATION
    if (!CRC_Validate(PARTITION_ACTIVE_START, PARTITION_SIZE)) {
        LogManager_Log("[Bootloader] Error: CRC validation failed for active firmware.\n");
        SetError(BOOTLOADER_ERR_CRC_MISMATCH);
        return false;
    }
#endif

    LogManager_Log(LOG_LEVEL_INFO, "[Bootloader] Booting active firmware...");
        current_state = BOOTLOADER_BOOT;

        // Perform jump-to-application
        MemoryManager_Deinit();
        return true;
    }

void Bootloader_Rollback(void) {
    LogManager_Log("[Bootloader] Initiating rollback to inactive firmware...\n");

    if (!Partition_SwitchActive()) {
        LogManager_Log("[Bootloader] Error: Failed to switch active partition.\n");
        SetError(BOOTLOADER_ERR_PARTITION_SWITCH_FAIL);
        return;
    }

    current_state = BOOTLOADER_BOOT;
    LogManager_Log("[Bootloader] Rollback successful. Ready to boot.\n");
}

bootloader_state_t Bootloader_GetState(void) {
    return current_state;
}

bootloader_error_t Bootloader_GetLastError(void) {
    return last_error;
}

