#include <stdio.h>
#include <stdint.h>
#include "i2c.h"
#include "firmware_data.h"  // Include the Hello World firmware binary

#define SLAVE_I2C_ADDR  0x55  // Slave I2C address
#define CMD_ERASE_BANK  0x01
#define CMD_WRITE_DATA  0x02
#define CMD_VALIDATE    0x03
#define CMD_BOOT        0x04

#define BANK0_START_ADDR 0x00004000
#define CHUNK_SIZE 256  // Size of each firmware chunk to send

void I2C_Init() {
    if (I2C_Master_Init(MXC_I2C1, 100000) != E_NO_ERROR) {  // Initialize at 100kHz
        printf("[Error] I2C Initialization failed.\n");
        while (1);
    }
    printf("[Info] I2C Initialized.\n");
}

void send_command(uint8_t command, uint32_t address, uint8_t *data, uint16_t length) {
    uint8_t packet[8 + length];  // Command + Address + Data
    packet[0] = command;
    packet[1] = (address >> 24) & 0xFF;
    packet[2] = (address >> 16) & 0xFF;
    packet[3] = (address >> 8) & 0xFF;
    packet[4] = address & 0xFF;

    for (int i = 0; i < length; i++) {
        packet[5 + i] = data[i];
    }

    if (I2C_Master_Write(MXC_I2C1, SLAVE_I2C_ADDR, packet, 5 + length, 0) != 5 + length) {
        printf("[Error] Failed to send command 0x%02X to slave.\n", command);
    } else {
        printf("[Info] Command 0x%02X sent successfully.\n", command);
    }
}

void erase_bank(uint32_t address) {
    send_command(CMD_ERASE_BANK, address, NULL, 0);
}

void write_firmware(uint32_t start_address) {
    uint32_t address = start_address;

    for (uint32_t i = 0; i < firmware_size; i += CHUNK_SIZE) {
        uint16_t len = (i + CHUNK_SIZE > firmware_size) ? (firmware_size - i) : CHUNK_SIZE;
        send_command(CMD_WRITE_DATA, address, &firmware_data[i], len);
        address += len;
    }
}

void validate_firmware(uint32_t address) {
    send_command(CMD_VALIDATE, address, NULL, 0);
}

void boot_firmware(uint32_t address) {
    send_command(CMD_BOOT, address, NULL, 0);
}

int main(void) {
    printf("[System] Master I2C Firmware Writer Starting...\n");

    I2C_Init();

    printf("[Info] Erasing Bank 0...\n");
    erase_bank(BANK0_START_ADDR);

    printf("[Info] Writing firmware to Bank 0...\n");
    write_firmware(BANK0_START_ADDR);

    printf("[Info] Validating firmware...\n");
    validate_firmware(BANK0_START_ADDR);

    printf("[Info] Booting firmware...\n");
    boot_firmware(BANK0_START_ADDR);

    printf("[System] Firmware update process complete.\n");
    return 0;
}
