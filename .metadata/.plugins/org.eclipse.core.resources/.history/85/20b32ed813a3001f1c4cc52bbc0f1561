


/*Script - log_manager.C*/
// by:-  Ashutosh tiwari



#include "log_manager.h"
#include <stdarg.h>
#include <time.h>


static log_level_t current_log_level = LOG_LEVEL_INFO;

static void PrintLog(log_level_t level) {
	const char* level_str = "";
	switch (level) {
		case LOG_LEVEL_INFO:
			level_str = "[INFO]";
			break;
		case LOG_LEVEL_DEBUG:
			level_str = "[DEBUG]";
			break;
		case LOG_LEVEL_ERROR:
			level_str = "[ERROR]";
			break;
	}

	time_t now;
	time(&now);
	struct tm* local_time = localtime(&now);
	printf("%02d:%02d:%02d %s ", local_time->tm_hour, local_time->tm_min, local_time->tm_sec, level_str);
}

void Logger_Init(void) {
	printf("[Logger Manager] Initialized.\n");
}

void Logger_SetLevel(log_level_t level) {
	current_log_level = level;
}

void Logger_Info(const char* format, ...) {
	if (current_log_level <= LOG_LEVEL_INFO) {
		PrintLogPrefix(LOG_LEVEL_INFO);
		va_list args;
		va_start(args, format);
		vprintf(format, args);
		va_end(args);
		printf("\n");
	}
}

void Logger_Debug(const char* format, ...) {
    if (current_log_level <= LOG_LEVEL_DEBUG) {
        PrintLogPrefix(LOG_LEVEL_DEBUG);
        va_list args;
        va_start(args, format);
        vprintf(format, args);
        va_end(args);
        printf("\n");
    }
}

void Logger_Error(const char* format, ...) {
    if (current_log_level <= LOG_LEVEL_ERROR) {
        PrintLogPrefix(LOG_LEVEL_ERROR);
        va_list args;
        va_start(args, format);
        vprintf(format, args);
        va_end(args);
        printf("\n");
    }
}
