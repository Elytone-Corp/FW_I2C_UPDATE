#include "mxc_device.h"
#include "mxc_sys.h"
#include "nvic_table.h"
#include "gpio.h"
#include "tmr.h"

#define PWM_GPIO_PIN    4  // Example GPIO pin for PWM input
#define TMR_IDX         0  // Timer index, assuming TMR0

volatile uint32_t rising_edge_time = 0;
volatile uint32_t falling_edge_time = 0;
volatile uint32_t duty_cycle = 0;

void TMR0_IRQHandler(void) {
    uint32_t status = MXC_TMR_GetFlags(MXC_TMR0);

    if (status & MXC_F_TMR_INTFL_CMP) {  // Corrected the flag name
        if (MXC_GPIO_InGet(MXC_GPIO0, PWM_GPIO_PIN)) {  // Fixed the gpio_cfg symbol issue
            // Capture rising edge
            rising_edge_time = MXC_TMR_GetCapture(MXC_TMR0);
        } else {
            // Capture falling edge
            falling_edge_time = MXC_TMR_GetCapture(MXC_TMR0);
            uint32_t period = falling_edge_time - rising_edge_time;
            uint32_t high_time = rising_edge_time;
            duty_cycle = (high_time * 100) / period;
        }
    }

    MXC_TMR_ClearFlags(MXC_TMR0);
}

void timer_init(void) {
    // Enable clock to the timer
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TMR0);

    // Configure the GPIO pin for input capture
    mxc_gpio_cfg_t gpio_cfg = { PWM_GPIO_PIN, MXC_GPIO_FUNC_ALT1, MXC_GPIO_PAD_NONE, MXC_GPIO_VSSEL_VDDIOH };
    MXC_GPIO_Config(&gpio_cfg);

    // Set up the timer
    mxc_tmr_cfg_t tmr_cfg;
    tmr_cfg.pres = MXC_TMR_PRES_1;  // Use the correct enumeration for prescaler
    tmr_cfg.mode = TMR_MODE_CAPTURE_COMPARE;  // Corrected mode
    tmr_cfg.bitMode = TMR_BIT_MODE_16;  // Corrected bit mode
    tmr_cfg.clock = MXC_TMR0;  // This is now unnecessary and removed
    tmr_cfg.polarity = TMR_POL_RISEFALL;  // Corrected polarity

    MXC_TMR_Init(MXC_TMR0, &tmr_cfg, 0);  // Corrected the third parameter
    MXC_TMR_SetCompare(MXC_TMR0, 0xFFFF);

    // Enable the interrupt
    NVIC_EnableIRQ(TMR0_IRQn);  // Fixed interrupt handler name
    MXC_TMR_EnableInt(MXC_TMR0);
    MXC_TMR_Start(MXC_TMR0);
}

int main(void) {
    // Initialize the system
    SystemInit();

    // Initialize the timer
    timer_init();

    while (1) {
        // Main loop can be used to process duty_cycle value or other tasks
    }

    return 0;
}
