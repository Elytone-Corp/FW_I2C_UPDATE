


/*Script - memory_manager.h*/
// by:-  Ashutosh Tiwari



#include "memory_manager.h"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

static uint8_t shared_buffer[MEMORY_BUFFER_SIZE];
static bool shared_buffer_in_use = false;

void MemoryManager_Init(void) {
	printf("[Memory Manager] Initialization complete.\n");
	memset(shared_buffer, 0, MEMORY_BUFFER_SIZE);
	shared_buffer_in_use = false;
}

void* MemoryManager_Allocate(uint32_t size) {
	if (size == 0 || size > MEMORY_BUFFER_SIZE) {
		print("[Memory Manager] Allocation failed: Invalid size %u.\n",size);
		return NULL;
	}

	void* buffer = malloc(size);
	if (buffer == NULL) {
		printf("[Memory Manager] Allocation failed: insufficient memory.\n");
	} else {
		printf("[Memory Manager] Allocated buffer of size %u.\n", size);
	}

	return buffer;
}

void MemoryManager_Free(void* buffer) {
	if (buffer != NULL) {
		free(buffer);
		printf("[Memory Manager] Buffer freed.\n");

	} else {
		printf("[Memory Manager] Invalid buffer or size for clearing.\n");
	}
}

void* MemoryManager_GetSharedBuffer(void) {
	if (shared_buffer_in_use) {
		printf("[Memory Manager] shared buffer is currently in use.\n");
		return NULL;
	}

	shared_buffer_in_use = true;
	printf("[Memory Manager] Shared buffer allocated.\n");
	return shared_buffer;

}

void MemoryManager_ReleaseSharedBuffer(void) {
	shared_buffer_in_use = false;
	printf("[Memory Manager] Shared buffer released.\n");
}


uint8_t* comm_buffer = NULL;

void CommunicationManager_Init(void) {
    // Allocate buffer dynamically
    comm_buffer = Memory_Allocate(COMM_BUFFER_SIZE);
    if (!comm_buffer) {
        printf("[CommManager] Buffer allocation failed.\n");
        return;
    }

    printf("[CommManager] Initialization complete.\n");
}

void CommunicationManager_Deinit(void) {
    Memory_Free(comm_buffer);
    comm_buffer = NULL;
}
