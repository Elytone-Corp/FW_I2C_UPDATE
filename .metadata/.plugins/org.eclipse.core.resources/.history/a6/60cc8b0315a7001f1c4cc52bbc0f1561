/******************************************************************************
 *
 * Copyright (C) 2022-2023 Maxim Integrated Products, Inc. (now owned by 
 * Analog Devices, Inc.),
 * Copyright (C) 2023-2024 Analog Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

/**
 * @file        main.c
 * @brief       I2C Master-Slave Transaction
 */


#include <stdio.h>
#include "bootloader.h"
#include "log_manager.h"
#include "reboot_manager.h"
#include "state_manager.h"
#include "i2c_driver.h"

int main(void) {
    printf("[System] Boot-loader starting...\n");

    // Initialize Logger for debugging output
    LogManager_Init();

    // Initialize Bootloader
    Bootloader_Init();

    // Retrieve current bootloader state
    bootloader_state_t state = Bootloader_GetState();

    while (1) {
        switch (state) {
            case BOOTLOADER_UPDATE:
                LogManager_Log(LOG_LEVEL_INFO, "[System] Update process in progress...");
                break;

            case BOOTLOADER_BOOT:
                LogManager_Log(LOG_LEVEL_INFO, "[System] Booting firmware...");
                if (!Bootloader_ValidateAndBoot()) {
                    LogManager_Log(LOG_LEVEL_ERROR, "[System] Boot failed. Initiating rollback...");
                    Bootloader_Rollback();
                }
                break;

            case BOOTLOADER_ROLLBACK:
                LogManager_Log(LOG_LEVEL_WARNING, "[System] Rollback state detected, performing rollback...");
                Bootloader_Rollback();
                break;

            case BOOTLOADER_IDLE:
                LogManager_Log(LOG_LEVEL_INFO, "[System] No valid firmware. Waiting for firmware update...");
                while (StateManager_IsInState(BOOTLOADER_IDLE)) {
                    // Remain idle, waiting for master to push firmware
                    // Poll for firmware updates, or add event-based triggers for updates.
                }
                break;

            case BOOTLOADER_ERROR:
            default:
                LogManager_Log(LOG_LEVEL_ERROR, "[System] Critical error: %d", Bootloader_GetLastError());
                RebootManager_PrepareReboot("Critical Error Detected");
                RebootManager_Reboot();
                break;
        }

        // Update state in case firmware is loaded during idle state
        state = Bootloader_GetState();
    }

    return 0;
}































































