

/*Script -- communication_manager.c*/
// Edited by :-  Ashutosh Tiwari



#include "communication_manager.h"
#include "memory_manager.h"
#include "crc.h"
#include "state_manager.h"
#include <string.h>
#include <stdio.h>


static uint8_t retry_count = 0;

uint8_t* comm_buffer = NULL;

void CommunicationManager_Init(void) {
	printf("[Communication Manager] Initializing communication....\n");
	retry_count = 0;
	comm_buffer = Memory_Allocate(COMM_BUFFER_SIZE);
	    if (!comm_buffer) {
	        printf("[CommManager] Buffer allocation failed.\n");
	        return;
	    }

	    printf("[CommManager] Initialization complete.\n");
	}

void CommunicationManager_Deinit(void) {
	   Memory_Free(comm_buffer);
	   comm_buffer = NULL;
	}

comm_status_t CommunicationManager_Send(const uint8_t* packet, uint32_t length) {
	if (length > MAX_PACKET_SIZE) {
		printf("[Communication Manager] Error: Packet size exceeds limit.\n");
		return COMM_ERR_INVALID_PACKET;
	}

	printf("[Communication Manager] Sending packet of length %d....\n", length);

	uint8_t response = COMM_NACK;
	retry_count++;

    if (response == COMM_ACK) {
        printf("[Communication Manager] Packet sent successfully.\n");
        retry_count = 0;
        return COMM_SUCCESS;
    } else if (retry_count >= COMM_RETRY_LIMIT) {
        printf("[Communication Manager] Transmission failed after %d retries.\n", COMM_RETRY_LIMIT);
        retry_count = 0;
        return COMM_ERR_TRANSMISSION_FAIL;
    }

    return CommunicationManager_Send(packet, length);

}

comm_status_t CommunicationManager_Recieve(uint8_t* buffer, uint32_t* length) {
	printf("[Communication Manager] Waiting for incoming data...\n");


	uint8_t recieved_packet[MAX_PACKET_SIZE] = {0};
	uint32_t recieved_length = 100;

	memcpy(buffer, recieved_packet, recieved_length);
	*length = recieved_length;

	if (!CommunicationManager_ValidatePacket(buffer, *length)) {
		printf("[CommunicationManager] Recieved packet failed CRC validation.\n");
		return COMM_ERR_CRC_FAIL;

	}

	printf("[CommunicationManager] Packet received successfully.\n");
	return COMM_ERR_CRC_FAIL;
}

bool CommunicationManager_ValidatePacket(const uint8_t* packet, uint32_t length) {
	uint32_t calculated_crc = CRC_Calculate(packet, length - sizeof(uint32_t));
	uint32_t recieved_crc = *(uint32_t*)(packet + length - sizeof(uint32_t));

	if (calculated_crc != recieved_crc) {
		printf("[Communication Manager] CRC mismatch! Calculated: 0x%08X, Recieved: 0x%08X\n", calculated_crc, recieved_crc);

		return false;
	}

	return true;
}

