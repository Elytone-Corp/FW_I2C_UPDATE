#include "i2c_driver.h"
#include "mxc_device.h"
#include "mxc_delay.h"
#include "i2c.h"
#include <stdio.h>
#include <string.h>

// I2C Timeout (in ms)
#define I2C_TIMEOUT_MS 1000

// Initialize I2C master with the provided slave address
void I2C_Master_Init(uint8_t slave_address) {
    int ret = MXC_I2C_Init(MXC_I2C0, 1, slave_address); // Initialize I2C in master mode
    if (ret != E_NO_ERROR) {
        printf("[I2C] Initialization failed with error code: %d\n", ret);
        return;
    }

    MXC_I2C_SetFrequency(MXC_I2C0, MXC_I2C_STD_MODE); // Set frequency to standard mode
    printf("[I2C] Master initialized with slave address: 0x%02X\n", slave_address);
}

// Deinitialize I2C master
void I2C_Master_Deinit(void) {
    MXC_I2C_Shutdown(MXC_I2C0);
    printf("[I2C] Master deinitialized.\n");
}

// Send data to the slave
i2c_status_t I2C_Send(const uint8_t* data, uint32_t length) {
    mxc_i2c_req_t req = {
        .i2c = MXC_I2C0,
        .addr = SLAVE_I2C_ADDRESS, // Slave address should be defined globally or passed as a parameter
        .tx_buf = (uint8_t*)data,
        .tx_len = length,
        .rx_buf = NULL,
        .rx_len = 0,
        .restart = 0
    };

    int ret = MXC_I2C_MasterTransaction(&req);
    if (ret != E_NO_ERROR) {
        printf("[I2C] Error sending data: %d\n", ret);
        return I2C_ERROR;
    }

    printf("[I2C] Data sent successfully.\n");
    return I2C_SUCCESS;
}

// Receive data from the slave
i2c_status_t I2C_Receive(uint8_t* buffer, uint32_t length) {
    mxc_i2c_req_t req = {
        .i2c = MXC_I2C0,
        .addr = SLAVE_I2C_ADDRESS,
        .tx_buf = NULL,
        .tx_len = 0,
        .rx_buf = buffer,
        .rx_len = length,
        .restart = 0
    };

    int ret = MXC_I2C_MasterTransaction(&req);
    if (ret != E_NO_ERROR) {
        printf("[I2C] Error receiving data: %d\n", ret);
        return I2C_ERROR;
    }

    printf("[I2C] Data received successfully.\n");
    return I2C_SUCCESS;
}

// IRQ Handler for I2C
void I2C0_IRQHandler(void) {
    MXC_I2C_AsyncHandler(MXC_I2C0);
}
