

/*Script - command_handler.c*/
// by:-  Ashutosh tiwari


#include "command_handler.h"
#include "flash_manager.h"
#include "log_manager.h"
#include "crc.h"
#include "partition_manager.h"
#include "bootloader.h"
#include <stdio.h>
#include <string.h>

// Initialization function
void CommandHandler_Init(void) {
    Logger_Info("[CommandHandler] Initialization complete.\n");
}

// Process incoming commands
cmd_response_t CommandHandler_ProcessCommand(uint8_t command, const uint8_t* payload, uint32_t payload_length) {
    switch (command) {
        case CMD_START_UPDATE:
            Logger_Info("[CommandHandler] CMD_START_UPDATE received.\n");
            Partition_Init();
            return CMD_SUCCESS;

        case CMD_ERASE_PARTITION:
            Logger_Info("[CommandHandler] CMD_ERASE_PARTITION received.\n");
            if (payload_length < sizeof(uint32_t)) {
                return CMD_ERR_PAYLOAD_SIZE_EXCEEDED;
            }

            uint32_t erase_address = *(uint32_t*)payload;
            if (Flash_ErasePage(erase_address) == FLASH_SUCCESS) {
                return CMD_SUCCESS;
            } else {
                return CMD_ERR_FLASH_OP_FAILED;
            }

        case CMD_PROGRAM_PAGE:
            Logger_Info("[CommandHandler] CMD_PROGRAM_PAGE received.\n");
            if (payload_length > PARTITION_SIZE) {
                Logger_Info("[CommandHandler] Error: Payload size exceeds partition size.\n");
                return CMD_ERR_PAYLOAD_SIZE_EXCEEDED;
            }
            if (Flash_ProgramPage(PARTITION_INACTIVE_START, payload, payload_length) == FLASH_SUCCESS) {
                return CMD_SUCCESS;
            } else {
                return CMD_ERR_FLASH_OP_FAILED;
            }

        case CMD_VALIDATE_CRC:
            Logger_Info("[CommandHandler] CMD_VALIDATE_CRC received.\n");
            if (CRC_Validate(PARTITION_INACTIVE_START, PARTITION_SIZE)) {
                return CMD_SUCCESS;
            } else {
                return CMD_ERR_CRC_MISMATCH;
            }

        case CMD_MARK_ACTIVE:
            Logger_Info("[CommandHandler] CMD_MARK_ACTIVE received.\n");
            Partition_Validate(PARTITION_INACTIVE);
            Partition_SwitchActive();
            return CMD_SUCCESS;

        case CMD_REBOOT:
            Logger_Info("[CommandHandler] CMD_REBOOT received.\n");
            Bootloader_Rollback();
            return CMD_SUCCESS;

        case CMD_QUERY_STATUS:
            Logger_Info("[CommandHandler] CMD_QUERY_STATUS received.\n");
            bootloader_state_t state = Bootloader_GetState();
            bootloader_error_t error = Bootloader_GetLastError();
            Logger_Info("[CommandHandler] Current State: %d, Last Error: %d\n", state, error);
            return CMD_SUCCESS;

        default:
            Logger_Info("[CommandHandler] Unknown command received: 0x%02X\n", command);
            return CMD_ERR_INVALID_COMMAND;
    }
}

