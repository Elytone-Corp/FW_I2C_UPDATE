/******************************************************************************
 *
 * Copyright (C) 2022-2023 Maxim Integrated Products, Inc. (now owned by 
 * Analog Devices, Inc.),
 * Copyright (C) 2023-2024 Analog Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

/**
 * @file        main.c
 * @brief       I2C Master-Slave Transaction
 */


#include <stdio.h>
#include "max32660.h"  // Device-specific header (this ensures IRQn_Type and other macros are defined)
#include "bootloader.h"
#include "log_manager.h"
#include "reboot_manager.h"
#include "state_manager.h"
#include "i2c_driver.h"
#include "log_manager.h"


int main(void) {
    printf("[System] Bootloader starting...\n");

    // Initialize Logger for proper debug output
    LogManager_Init();
    LogManager_Log(int LOG_LEVEL_DEBUG);

    // Initialize the bootloader system
    Bootloader_Init();

    // Check and handle state
    bootloader_state_t state = Bootloader_GetState();

    switch (state) {
        case BOOTLOADER_UPDATE:
            LogManager_Log(LOG_LEVEL_INFO, "[System] Update process in progress...");
            break;

        case BOOTLOADER_BOOT:
            LogManager_Log(LOG_LEVEL_INFO, "[System] Booting firmware...");
            if (!Bootloader_ValidateAndBoot()) {
                LogManager_Log(LOG_LEVEL_ERROR, "[System] Boot failed. Initiating rollback...");
                Bootloader_Rollback();
            }
            break;

        case BOOTLOADER_ROLLBACK:
            LogManager_Log(LOG_LEVEL_WARNING, "[System] Rollback state detected, performing rollback...");
            Bootloader_Rollback();
            break;

        case BOOTLOADER_ERROR:
        default:
            LogManager_Log(LOG_LEVEL_ERROR, "[System] Bootloader encountered a critical error: %d", Bootloader_GetLastError());
            RebootManager_PrepareReboot("Critical Error Detected");
            RebootManager_Reboot();
            break;
    }

    return 0;
}































































