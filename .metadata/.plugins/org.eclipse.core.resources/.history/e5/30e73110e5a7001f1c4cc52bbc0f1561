

/*Script - i2c_driver.c*/
// by:-  Ashutosh tiwari



#include "i2c_driver.h"
#include "mxc_device.h"
#include "mxc_delay.h"
#include "i2c.h"
#include <string.h>
#include <stdio.h>

#define I2C_SLAVE_ADDR  0x55
#define I2C_FREQ 		100000
#define I2C_TIMEOUT_MS  1000

uint32_t length;

static volatile int i2c_async_flag = 0;

static void i2c_callback(mxc_i2c_req_t *req, int error) {
	if (error != E_NO_ERROR) {
		printf("I2C Callback Error: %d\n", error);
	}
	i2c_async_flag = 1;
}

void I2C_Slave_Init(void) {
	int ret = MXC_I2C_Init(MXC_I2C0, 1, 0);
	if (ret != E_NO_ERROR) {
	    printf("I2C initialization failed with error code: %d\n", ret);
		return;
	}

	printf("I2C slave initialized with address 0%X\n", I2C_SLAVE_ADDR);
}

i2c_status_t I2C_Send(uint8_t* data, uint32_t length) {
    mxc_i2c_req_t req;
    req.i2c = MXC_I2C0;
    req.addr = I2C_SLAVE_ADDR;
    req.tx_buf = data;
    req.tx_len = length;
    req.rx_buf = NULL;
    req.rx_len = 0;
    req.restart = 0;
    req.callback = i2c_callback;

    i2c_async_flag = 0;

    int ret = MXC_I2C_MasterTransactionAsync(&req);
    if (ret != E_NO_ERROR) {
        printf("I2C Send Error %d\n", ret);
        return I2C_ERROR;
    }

    while (!i2c_async_flag);

    return I2C_SUCCESS;
}

i2c_status_t I2C_Receive(uint8_t* buffer, uint32_t length) {
    mxc_i2c_req_t req;
    req.i2c = MXC_I2C0;
    req.addr = I2C_SLAVE_ADDR;
    req.tx_buf = NULL;
    req.tx_len = 0;
    req.rx_buf = buffer;
    req.rx_len = length;
    req.restart = 0;
    req.callback = i2c_callback;

    i2c_async_flag = 0;

    int ret = MXC_I2C_MasterTransactionAsync(&req);
    if (ret != E_NO_ERROR) {
        printf("I2C Receive Error: %d\n", ret);
        return I2C_ERROR;
    }

    // Wait for completion
    while (!i2c_async_flag);

    return I2C_SUCCESS;
}
